// src/generated/utils/metadata_routing/MetadataRequest.ts
import crypto from "node:crypto";
var MetadataRequest = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MetadataRequest${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MetadataRequest instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MetadataRequest.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MetadataRequest
try: bridgeMetadataRequest
except NameError: bridgeMetadataRequest = {}
`;
    await this._py.ex`ctor_MetadataRequest = {'owner': ${this.opts["owner"] ?? void 0}}

ctor_MetadataRequest = {k: v for k, v in ctor_MetadataRequest.items() if v is not None}`;
    await this._py.ex`bridgeMetadataRequest[${this.id}] = MetadataRequest(**ctor_MetadataRequest)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMetadataRequest[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Check whether the given parameters are consumed by the given method.
   */
  async consumes(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRequest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRequest must call init() before consumes()");
    }
    await this._py.ex`pms_MetadataRequest_consumes = {'method': ${opts["method"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRequest_consumes = {k: v for k, v in pms_MetadataRequest_consumes.items() if v is not None}`;
    await this._py.ex`res_MetadataRequest_consumes = bridgeMetadataRequest[${this.id}].consumes(**pms_MetadataRequest_consumes)`;
    return this._py`res_MetadataRequest_consumes.tolist() if hasattr(res_MetadataRequest_consumes, 'tolist') else res_MetadataRequest_consumes`;
  }
};

// src/generated/utils/metadata_routing/MetadataRouter.ts
import crypto2 from "node:crypto";
var MetadataRouter = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MetadataRouter${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MetadataRouter.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MetadataRouter
try: bridgeMetadataRouter
except NameError: bridgeMetadataRouter = {}
`;
    await this._py.ex`ctor_MetadataRouter = {'owner': ${this.opts["owner"] ?? void 0}}

ctor_MetadataRouter = {k: v for k, v in ctor_MetadataRouter.items() if v is not None}`;
    await this._py.ex`bridgeMetadataRouter[${this.id}] = MetadataRouter(**ctor_MetadataRouter)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMetadataRouter[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Add named objects with their corresponding method mapping.
   */
  async add(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRouter must call init() before add()");
    }
    await this._py.ex`pms_MetadataRouter_add = {'method_mapping': ${opts["method_mapping"] ?? void 0}, 'objs': ${opts["objs"] ?? void 0}}

pms_MetadataRouter_add = {k: v for k, v in pms_MetadataRouter_add.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_add = bridgeMetadataRouter[${this.id}].add(**pms_MetadataRouter_add)`;
    return this._py`res_MetadataRouter_add.tolist() if hasattr(res_MetadataRouter_add, 'tolist') else res_MetadataRouter_add`;
  }
  /**
      Add `self` (as a consumer) to the routing.
  
      This method is used if the router is also a consumer, and hence the router itself needs to be included in the routing. The passed object can be an estimator or a [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest "sklearn.utils.metadata_routing.MetadataRequest").
  
      A router should add itself using this method instead of `add` since it should be treated differently than the other objects to which metadata is routed by the router.
     */
  async add_self_request(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MetadataRouter must call init() before add_self_request()"
      );
    }
    await this._py.ex`pms_MetadataRouter_add_self_request = {'obj': ${opts["obj"] ?? void 0}}

pms_MetadataRouter_add_self_request = {k: v for k, v in pms_MetadataRouter_add_self_request.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_add_self_request = bridgeMetadataRouter[${this.id}].add_self_request(**pms_MetadataRouter_add_self_request)`;
    return this._py`res_MetadataRouter_add_self_request.tolist() if hasattr(res_MetadataRouter_add_self_request, 'tolist') else res_MetadataRouter_add_self_request`;
  }
  /**
    Check whether the given parameters are consumed by the given method.
   */
  async consumes(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRouter must call init() before consumes()");
    }
    await this._py.ex`pms_MetadataRouter_consumes = {'method': ${opts["method"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRouter_consumes = {k: v for k, v in pms_MetadataRouter_consumes.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_consumes = bridgeMetadataRouter[${this.id}].consumes(**pms_MetadataRouter_consumes)`;
    return this._py`res_MetadataRouter_consumes.tolist() if hasattr(res_MetadataRouter_consumes, 'tolist') else res_MetadataRouter_consumes`;
  }
  /**
      Return the input parameters requested by child objects.
  
      The output of this method is a bunch, which includes the metadata for all methods of each child object that is used in the router’s `caller` method.
  
      If the router is also a consumer, it also checks for warnings of `self`’s/consumer’s requested metadata.
     */
  async route_params(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRouter must call init() before route_params()");
    }
    await this._py.ex`pms_MetadataRouter_route_params = {'caller': ${opts["caller"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRouter_route_params = {k: v for k, v in pms_MetadataRouter_route_params.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_route_params = bridgeMetadataRouter[${this.id}].route_params(**pms_MetadataRouter_route_params)`;
    return this._py`res_MetadataRouter_route_params.tolist() if hasattr(res_MetadataRouter_route_params, 'tolist') else res_MetadataRouter_route_params`;
  }
  /**
      Validate given metadata for a method.
  
      This raises a `TypeError` if some of the passed metadata are not understood by child objects.
     */
  async validate_metadata(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MetadataRouter must call init() before validate_metadata()"
      );
    }
    await this._py.ex`pms_MetadataRouter_validate_metadata = {'method': ${opts["method"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRouter_validate_metadata = {k: v for k, v in pms_MetadataRouter_validate_metadata.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_validate_metadata = bridgeMetadataRouter[${this.id}].validate_metadata(**pms_MetadataRouter_validate_metadata)`;
    return this._py`res_MetadataRouter_validate_metadata.tolist() if hasattr(res_MetadataRouter_validate_metadata, 'tolist') else res_MetadataRouter_validate_metadata`;
  }
};

// src/generated/utils/metadata_routing/MethodMapping.ts
import crypto3 from "node:crypto";
var MethodMapping = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MethodMapping${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MethodMapping.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MethodMapping
try: bridgeMethodMapping
except NameError: bridgeMethodMapping = {}
`;
    await this._py.ex`ctor_MethodMapping = {'caller': ${this.opts["caller"] ?? void 0}, 'callee': ${this.opts["callee"] ?? void 0}}

ctor_MethodMapping = {k: v for k, v in ctor_MethodMapping.items() if v is not None}`;
    await this._py.ex`bridgeMethodMapping[${this.id}] = MethodMapping(**ctor_MethodMapping)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMethodMapping[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Add a method mapping.
   */
  async add(opts) {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MethodMapping must call init() before add()");
    }
    await this._py.ex`pms_MethodMapping_add = {'caller': ${opts["caller"] ?? void 0}, 'callee': ${opts["callee"] ?? void 0}}

pms_MethodMapping_add = {k: v for k, v in pms_MethodMapping_add.items() if v is not None}`;
    await this._py.ex`res_MethodMapping_add = bridgeMethodMapping[${this.id}].add(**pms_MethodMapping_add)`;
    return this._py`res_MethodMapping_add.tolist() if hasattr(res_MethodMapping_add, 'tolist') else res_MethodMapping_add`;
  }
  /**
    Returns self.
   */
  get self() {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MethodMapping must call init() before accessing self");
    }
    return (async () => {
      await this._py.ex`attr_MethodMapping_self = bridgeMethodMapping[${this.id}].self`;
      return this._py`attr_MethodMapping_self.tolist() if hasattr(attr_MethodMapping_self, 'tolist') else attr_MethodMapping_self`;
    })();
  }
};
export {
  MetadataRequest,
  MetadataRouter,
  MethodMapping
};
//# sourceMappingURL=index.js.map