// src/generated/utils/Bunch.ts
import crypto from "node:crypto";
var Bunch = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `Bunch${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Bunch.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils import Bunch
try: bridgeBunch
except NameError: bridgeBunch = {}
`;
    await this._py.ex`ctor_Bunch = {}

ctor_Bunch = {k: v for k, v in ctor_Bunch.items() if v is not None}`;
    await this._py.ex`bridgeBunch[${this.id}] = Bunch(**ctor_Bunch)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeBunch[${this.id}]`;
    this._isDisposed = true;
  }
  async clear(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before clear()");
    }
    await this._py.ex`pms_Bunch_clear = {}

pms_Bunch_clear = {k: v for k, v in pms_Bunch_clear.items() if v is not None}`;
    await this._py.ex`res_Bunch_clear = bridgeBunch[${this.id}].clear(**pms_Bunch_clear)`;
    return this._py`res_Bunch_clear.tolist() if hasattr(res_Bunch_clear, 'tolist') else res_Bunch_clear`;
  }
  async copy(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before copy()");
    }
    await this._py.ex`pms_Bunch_copy = {}

pms_Bunch_copy = {k: v for k, v in pms_Bunch_copy.items() if v is not None}`;
    await this._py.ex`res_Bunch_copy = bridgeBunch[${this.id}].copy(**pms_Bunch_copy)`;
    return this._py`res_Bunch_copy.tolist() if hasattr(res_Bunch_copy, 'tolist') else res_Bunch_copy`;
  }
  /**
    Create a new dictionary with keys from iterable and values set to value.
   */
  async fromkeys(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before fromkeys()");
    }
    await this._py.ex`pms_Bunch_fromkeys = {}

pms_Bunch_fromkeys = {k: v for k, v in pms_Bunch_fromkeys.items() if v is not None}`;
    await this._py.ex`res_Bunch_fromkeys = bridgeBunch[${this.id}].fromkeys(**pms_Bunch_fromkeys)`;
    return this._py`res_Bunch_fromkeys.tolist() if hasattr(res_Bunch_fromkeys, 'tolist') else res_Bunch_fromkeys`;
  }
  /**
    Return the value for key if key is in the dictionary, else default.
   */
  async get(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before get()");
    }
    await this._py.ex`pms_Bunch_get = {}

pms_Bunch_get = {k: v for k, v in pms_Bunch_get.items() if v is not None}`;
    await this._py.ex`res_Bunch_get = bridgeBunch[${this.id}].get(**pms_Bunch_get)`;
    return this._py`res_Bunch_get.tolist() if hasattr(res_Bunch_get, 'tolist') else res_Bunch_get`;
  }
  async items(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before items()");
    }
    await this._py.ex`pms_Bunch_items = {}

pms_Bunch_items = {k: v for k, v in pms_Bunch_items.items() if v is not None}`;
    await this._py.ex`res_Bunch_items = bridgeBunch[${this.id}].items(**pms_Bunch_items)`;
    return this._py`res_Bunch_items.tolist() if hasattr(res_Bunch_items, 'tolist') else res_Bunch_items`;
  }
  async keys(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before keys()");
    }
    await this._py.ex`pms_Bunch_keys = {}

pms_Bunch_keys = {k: v for k, v in pms_Bunch_keys.items() if v is not None}`;
    await this._py.ex`res_Bunch_keys = bridgeBunch[${this.id}].keys(**pms_Bunch_keys)`;
    return this._py`res_Bunch_keys.tolist() if hasattr(res_Bunch_keys, 'tolist') else res_Bunch_keys`;
  }
  /**
    If key is not found, default is returned if given, otherwise KeyError is raised
   */
  async pop(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before pop()");
    }
    await this._py.ex`pms_Bunch_pop = {}

pms_Bunch_pop = {k: v for k, v in pms_Bunch_pop.items() if v is not None}`;
    await this._py.ex`res_Bunch_pop = bridgeBunch[${this.id}].pop(**pms_Bunch_pop)`;
    return this._py`res_Bunch_pop.tolist() if hasattr(res_Bunch_pop, 'tolist') else res_Bunch_pop`;
  }
  /**
      Remove and return a (key, value) pair as a 2-tuple.
  
      Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.
     */
  async popitem(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before popitem()");
    }
    await this._py.ex`pms_Bunch_popitem = {}

pms_Bunch_popitem = {k: v for k, v in pms_Bunch_popitem.items() if v is not None}`;
    await this._py.ex`res_Bunch_popitem = bridgeBunch[${this.id}].popitem(**pms_Bunch_popitem)`;
    return this._py`res_Bunch_popitem.tolist() if hasattr(res_Bunch_popitem, 'tolist') else res_Bunch_popitem`;
  }
  /**
      Insert key with a value of default if key is not in the dictionary.
  
      Return the value for key if key is in the dictionary, else default.
     */
  async setdefault(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before setdefault()");
    }
    await this._py.ex`pms_Bunch_setdefault = {}

pms_Bunch_setdefault = {k: v for k, v in pms_Bunch_setdefault.items() if v is not None}`;
    await this._py.ex`res_Bunch_setdefault = bridgeBunch[${this.id}].setdefault(**pms_Bunch_setdefault)`;
    return this._py`res_Bunch_setdefault.tolist() if hasattr(res_Bunch_setdefault, 'tolist') else res_Bunch_setdefault`;
  }
  /**
    If E is present and has a .keys() method, then does: for k in E: D\[k\] = E\[k\] If E is present and lacks a .keys() method, then does: for k, v in E: D\[k\] = v In either case, this is followed by: for k in F: D\[k\] = F\[k\]
   */
  async update(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before update()");
    }
    await this._py.ex`pms_Bunch_update = {}

pms_Bunch_update = {k: v for k, v in pms_Bunch_update.items() if v is not None}`;
    await this._py.ex`res_Bunch_update = bridgeBunch[${this.id}].update(**pms_Bunch_update)`;
    return this._py`res_Bunch_update.tolist() if hasattr(res_Bunch_update, 'tolist') else res_Bunch_update`;
  }
  async values(opts) {
    if (this._isDisposed) {
      throw new Error("This Bunch instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Bunch must call init() before values()");
    }
    await this._py.ex`pms_Bunch_values = {}

pms_Bunch_values = {k: v for k, v in pms_Bunch_values.items() if v is not None}`;
    await this._py.ex`res_Bunch_values = bridgeBunch[${this.id}].values(**pms_Bunch_values)`;
    return this._py`res_Bunch_values.tolist() if hasattr(res_Bunch_values, 'tolist') else res_Bunch_values`;
  }
};

// src/generated/utils/metadata_routing/MetadataRequest.ts
import crypto2 from "node:crypto";
var MetadataRequest = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MetadataRequest${crypto2.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MetadataRequest instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MetadataRequest.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MetadataRequest
try: bridgeMetadataRequest
except NameError: bridgeMetadataRequest = {}
`;
    await this._py.ex`ctor_MetadataRequest = {'owner': ${this.opts["owner"] ?? void 0}}

ctor_MetadataRequest = {k: v for k, v in ctor_MetadataRequest.items() if v is not None}`;
    await this._py.ex`bridgeMetadataRequest[${this.id}] = MetadataRequest(**ctor_MetadataRequest)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMetadataRequest[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Check whether the given parameters are consumed by the given method.
   */
  async consumes(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRequest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRequest must call init() before consumes()");
    }
    await this._py.ex`pms_MetadataRequest_consumes = {'method': ${opts["method"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRequest_consumes = {k: v for k, v in pms_MetadataRequest_consumes.items() if v is not None}`;
    await this._py.ex`res_MetadataRequest_consumes = bridgeMetadataRequest[${this.id}].consumes(**pms_MetadataRequest_consumes)`;
    return this._py`res_MetadataRequest_consumes.tolist() if hasattr(res_MetadataRequest_consumes, 'tolist') else res_MetadataRequest_consumes`;
  }
};

// src/generated/utils/metadata_routing/MetadataRouter.ts
import crypto3 from "node:crypto";
var MetadataRouter = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MetadataRouter${crypto3.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MetadataRouter.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MetadataRouter
try: bridgeMetadataRouter
except NameError: bridgeMetadataRouter = {}
`;
    await this._py.ex`ctor_MetadataRouter = {'owner': ${this.opts["owner"] ?? void 0}}

ctor_MetadataRouter = {k: v for k, v in ctor_MetadataRouter.items() if v is not None}`;
    await this._py.ex`bridgeMetadataRouter[${this.id}] = MetadataRouter(**ctor_MetadataRouter)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMetadataRouter[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Add named objects with their corresponding method mapping.
   */
  async add(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRouter must call init() before add()");
    }
    await this._py.ex`pms_MetadataRouter_add = {'method_mapping': ${opts["method_mapping"] ?? void 0}, 'objs': ${opts["objs"] ?? void 0}}

pms_MetadataRouter_add = {k: v for k, v in pms_MetadataRouter_add.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_add = bridgeMetadataRouter[${this.id}].add(**pms_MetadataRouter_add)`;
    return this._py`res_MetadataRouter_add.tolist() if hasattr(res_MetadataRouter_add, 'tolist') else res_MetadataRouter_add`;
  }
  /**
      Add `self` (as a consumer) to the routing.
  
      This method is used if the router is also a consumer, and hence the router itself needs to be included in the routing. The passed object can be an estimator or a [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest "sklearn.utils.metadata_routing.MetadataRequest").
  
      A router should add itself using this method instead of `add` since it should be treated differently than the other objects to which metadata is routed by the router.
     */
  async add_self_request(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MetadataRouter must call init() before add_self_request()"
      );
    }
    await this._py.ex`pms_MetadataRouter_add_self_request = {'obj': ${opts["obj"] ?? void 0}}

pms_MetadataRouter_add_self_request = {k: v for k, v in pms_MetadataRouter_add_self_request.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_add_self_request = bridgeMetadataRouter[${this.id}].add_self_request(**pms_MetadataRouter_add_self_request)`;
    return this._py`res_MetadataRouter_add_self_request.tolist() if hasattr(res_MetadataRouter_add_self_request, 'tolist') else res_MetadataRouter_add_self_request`;
  }
  /**
    Check whether the given parameters are consumed by the given method.
   */
  async consumes(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRouter must call init() before consumes()");
    }
    await this._py.ex`pms_MetadataRouter_consumes = {'method': ${opts["method"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRouter_consumes = {k: v for k, v in pms_MetadataRouter_consumes.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_consumes = bridgeMetadataRouter[${this.id}].consumes(**pms_MetadataRouter_consumes)`;
    return this._py`res_MetadataRouter_consumes.tolist() if hasattr(res_MetadataRouter_consumes, 'tolist') else res_MetadataRouter_consumes`;
  }
  /**
      Return the input parameters requested by child objects.
  
      The output of this method is a bunch, which includes the metadata for all methods of each child object that is used in the router’s `caller` method.
  
      If the router is also a consumer, it also checks for warnings of `self`’s/consumer’s requested metadata.
     */
  async route_params(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRouter must call init() before route_params()");
    }
    await this._py.ex`pms_MetadataRouter_route_params = {'caller': ${opts["caller"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRouter_route_params = {k: v for k, v in pms_MetadataRouter_route_params.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_route_params = bridgeMetadataRouter[${this.id}].route_params(**pms_MetadataRouter_route_params)`;
    return this._py`res_MetadataRouter_route_params.tolist() if hasattr(res_MetadataRouter_route_params, 'tolist') else res_MetadataRouter_route_params`;
  }
  /**
      Validate given metadata for a method.
  
      This raises a `TypeError` if some of the passed metadata are not understood by child objects.
     */
  async validate_metadata(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRouter instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error(
        "MetadataRouter must call init() before validate_metadata()"
      );
    }
    await this._py.ex`pms_MetadataRouter_validate_metadata = {'method': ${opts["method"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRouter_validate_metadata = {k: v for k, v in pms_MetadataRouter_validate_metadata.items() if v is not None}`;
    await this._py.ex`res_MetadataRouter_validate_metadata = bridgeMetadataRouter[${this.id}].validate_metadata(**pms_MetadataRouter_validate_metadata)`;
    return this._py`res_MetadataRouter_validate_metadata.tolist() if hasattr(res_MetadataRouter_validate_metadata, 'tolist') else res_MetadataRouter_validate_metadata`;
  }
};

// src/generated/utils/metadata_routing/MethodMapping.ts
import crypto4 from "node:crypto";
var MethodMapping = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MethodMapping${crypto4.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MethodMapping.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MethodMapping
try: bridgeMethodMapping
except NameError: bridgeMethodMapping = {}
`;
    await this._py.ex`ctor_MethodMapping = {'caller': ${this.opts["caller"] ?? void 0}, 'callee': ${this.opts["callee"] ?? void 0}}

ctor_MethodMapping = {k: v for k, v in ctor_MethodMapping.items() if v is not None}`;
    await this._py.ex`bridgeMethodMapping[${this.id}] = MethodMapping(**ctor_MethodMapping)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMethodMapping[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Add a method mapping.
   */
  async add(opts) {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MethodMapping must call init() before add()");
    }
    await this._py.ex`pms_MethodMapping_add = {'caller': ${opts["caller"] ?? void 0}, 'callee': ${opts["callee"] ?? void 0}}

pms_MethodMapping_add = {k: v for k, v in pms_MethodMapping_add.items() if v is not None}`;
    await this._py.ex`res_MethodMapping_add = bridgeMethodMapping[${this.id}].add(**pms_MethodMapping_add)`;
    return this._py`res_MethodMapping_add.tolist() if hasattr(res_MethodMapping_add, 'tolist') else res_MethodMapping_add`;
  }
  /**
    Returns self.
   */
  get self() {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MethodMapping must call init() before accessing self");
    }
    return (async () => {
      await this._py.ex`attr_MethodMapping_self = bridgeMethodMapping[${this.id}].self`;
      return this._py`attr_MethodMapping_self.tolist() if hasattr(attr_MethodMapping_self, 'tolist') else attr_MethodMapping_self`;
    })();
  }
};

// src/generated/utils/parallel/Parallel.ts
import crypto5 from "node:crypto";
var Parallel = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `Parallel${crypto5.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("Parallel.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.parallel import Parallel
try: bridgeParallel
except NameError: bridgeParallel = {}
`;
    await this._py.ex`ctor_Parallel = {'iterable': ${this.opts["iterable"] ?? void 0}}

ctor_Parallel = {k: v for k, v in ctor_Parallel.items() if v is not None}`;
    await this._py.ex`bridgeParallel[${this.id}] = Parallel(**ctor_Parallel)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeParallel[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Dispatch the tasks and return the results.
   */
  async __call__(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before __call__()");
    }
    await this._py.ex`pms_Parallel___call__ = {'iterable': ${opts["iterable"] ?? void 0}}

pms_Parallel___call__ = {k: v for k, v in pms_Parallel___call__.items() if v is not None}`;
    await this._py.ex`res_Parallel___call__ = bridgeParallel[${this.id}].__call__(**pms_Parallel___call__)`;
    return this._py`res_Parallel___call__.tolist() if hasattr(res_Parallel___call__, 'tolist') else res_Parallel___call__`;
  }
  /**
      Dispatch more data for parallel processing
  
      This method is meant to be called concurrently by the multiprocessing callback. We rely on the thread-safety of dispatch_one_batch to protect against concurrent consumption of the unprotected iterator.
     */
  async dispatch_next(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before dispatch_next()");
    }
    await this._py.ex`pms_Parallel_dispatch_next = {}

pms_Parallel_dispatch_next = {k: v for k, v in pms_Parallel_dispatch_next.items() if v is not None}`;
    await this._py.ex`res_Parallel_dispatch_next = bridgeParallel[${this.id}].dispatch_next(**pms_Parallel_dispatch_next)`;
    return this._py`res_Parallel_dispatch_next.tolist() if hasattr(res_Parallel_dispatch_next, 'tolist') else res_Parallel_dispatch_next`;
  }
  /**
      Prefetch the tasks for the next batch and dispatch them.
  
      The effective size of the batch is computed here. If there are no more jobs to dispatch, return `false`, else return `true`.
  
      The iterator consumption and dispatching is protected by the same lock so calling this function should be thread safe.
     */
  async dispatch_one_batch(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before dispatch_one_batch()");
    }
    await this._py.ex`pms_Parallel_dispatch_one_batch = {}

pms_Parallel_dispatch_one_batch = {k: v for k, v in pms_Parallel_dispatch_one_batch.items() if v is not None}`;
    await this._py.ex`res_Parallel_dispatch_one_batch = bridgeParallel[${this.id}].dispatch_one_batch(**pms_Parallel_dispatch_one_batch)`;
    return this._py`res_Parallel_dispatch_one_batch.tolist() if hasattr(res_Parallel_dispatch_one_batch, 'tolist') else res_Parallel_dispatch_one_batch`;
  }
  /**
    Return the formatted representation of the object.
   */
  async format(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before format()");
    }
    await this._py.ex`pms_Parallel_format = {}

pms_Parallel_format = {k: v for k, v in pms_Parallel_format.items() if v is not None}`;
    await this._py.ex`res_Parallel_format = bridgeParallel[${this.id}].format(**pms_Parallel_format)`;
    return this._py`res_Parallel_format.tolist() if hasattr(res_Parallel_format, 'tolist') else res_Parallel_format`;
  }
  /**
    Display the process of the parallel execution only a fraction of time, controlled by self.verbose.
   */
  async print_progress(opts) {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before print_progress()");
    }
    await this._py.ex`pms_Parallel_print_progress = {}

pms_Parallel_print_progress = {k: v for k, v in pms_Parallel_print_progress.items() if v is not None}`;
    await this._py.ex`res_Parallel_print_progress = bridgeParallel[${this.id}].print_progress(**pms_Parallel_print_progress)`;
    return this._py`res_Parallel_print_progress.tolist() if hasattr(res_Parallel_print_progress, 'tolist') else res_Parallel_print_progress`;
  }
  /**
    List of results of the tasks.
   */
  get results() {
    if (this._isDisposed) {
      throw new Error("This Parallel instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("Parallel must call init() before accessing results");
    }
    return (async () => {
      await this._py.ex`attr_Parallel_results = bridgeParallel[${this.id}].results`;
      return this._py`attr_Parallel_results.tolist() if hasattr(attr_Parallel_results, 'tolist') else attr_Parallel_results`;
    })();
  }
};
export {
  Bunch,
  MetadataRequest,
  MetadataRouter,
  MethodMapping,
  Parallel
};
//# sourceMappingURL=index.js.map